<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\debug\usb_dev_msc.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\debug\usb_dev_msc.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Wed Mar 02 17:05:27 2022
<BR><P>
<H3>Maximum Stack Usage =        212 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
usb_dev_msc_dataout &rArr; msc_bot_dataout &rArr; msc_bot_decode_cbw &rArr; scsi_cmdprocess &rArr; scsi_write10 &rArr; scsi_processwrite &rArr; msc_bot_txcsw &rArr; hd_usb_readytorx &rArr; hd_usb_epntransbegin &rArr; hd_usb_wrpkt
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[af]">IRQ128_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[af]">IRQ128_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[29]">BusFault_Handler</a> from hc32f460_interrupts.o(i.BusFault_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2c]">DebugMon_Handler</a> from hc32f460_interrupts.o(i.DebugMon_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[27]">HardFault_Handler</a> from hc32f460_interrupts.o(i.HardFault_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2f]">IRQ000_Handler</a> from hc32f460_interrupts.o(i.IRQ000_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[30]">IRQ001_Handler</a> from hc32f460_interrupts.o(i.IRQ001_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[31]">IRQ002_Handler</a> from hc32f460_interrupts.o(i.IRQ002_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[32]">IRQ003_Handler</a> from hc32f460_interrupts.o(i.IRQ003_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[33]">IRQ004_Handler</a> from hc32f460_interrupts.o(i.IRQ004_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[34]">IRQ005_Handler</a> from hc32f460_interrupts.o(i.IRQ005_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[35]">IRQ006_Handler</a> from hc32f460_interrupts.o(i.IRQ006_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[36]">IRQ007_Handler</a> from hc32f460_interrupts.o(i.IRQ007_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[37]">IRQ008_Handler</a> from hc32f460_interrupts.o(i.IRQ008_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[38]">IRQ009_Handler</a> from hc32f460_interrupts.o(i.IRQ009_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[39]">IRQ010_Handler</a> from hc32f460_interrupts.o(i.IRQ010_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3a]">IRQ011_Handler</a> from hc32f460_interrupts.o(i.IRQ011_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3b]">IRQ012_Handler</a> from hc32f460_interrupts.o(i.IRQ012_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3c]">IRQ013_Handler</a> from hc32f460_interrupts.o(i.IRQ013_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3d]">IRQ014_Handler</a> from hc32f460_interrupts.o(i.IRQ014_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3e]">IRQ015_Handler</a> from hc32f460_interrupts.o(i.IRQ015_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3f]">IRQ016_Handler</a> from hc32f460_interrupts.o(i.IRQ016_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[40]">IRQ017_Handler</a> from hc32f460_interrupts.o(i.IRQ017_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[41]">IRQ018_Handler</a> from hc32f460_interrupts.o(i.IRQ018_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[42]">IRQ019_Handler</a> from hc32f460_interrupts.o(i.IRQ019_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[43]">IRQ020_Handler</a> from hc32f460_interrupts.o(i.IRQ020_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[44]">IRQ021_Handler</a> from hc32f460_interrupts.o(i.IRQ021_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[45]">IRQ022_Handler</a> from hc32f460_interrupts.o(i.IRQ022_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[46]">IRQ023_Handler</a> from hc32f460_interrupts.o(i.IRQ023_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[47]">IRQ024_Handler</a> from hc32f460_interrupts.o(i.IRQ024_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[48]">IRQ025_Handler</a> from hc32f460_interrupts.o(i.IRQ025_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[49]">IRQ026_Handler</a> from hc32f460_interrupts.o(i.IRQ026_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[4a]">IRQ027_Handler</a> from hc32f460_interrupts.o(i.IRQ027_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[4b]">IRQ028_Handler</a> from hc32f460_interrupts.o(i.IRQ028_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[4c]">IRQ029_Handler</a> from hc32f460_interrupts.o(i.IRQ029_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[4d]">IRQ030_Handler</a> from hc32f460_interrupts.o(i.IRQ030_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[4e]">IRQ031_Handler</a> from hc32f460_interrupts.o(i.IRQ031_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[4f]">IRQ032_Handler</a> from hc32f460_interrupts.o(i.IRQ032_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[50]">IRQ033_Handler</a> from hc32f460_interrupts.o(i.IRQ033_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[51]">IRQ034_Handler</a> from hc32f460_interrupts.o(i.IRQ034_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[52]">IRQ035_Handler</a> from hc32f460_interrupts.o(i.IRQ035_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[53]">IRQ036_Handler</a> from hc32f460_interrupts.o(i.IRQ036_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[54]">IRQ037_Handler</a> from hc32f460_interrupts.o(i.IRQ037_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[55]">IRQ038_Handler</a> from hc32f460_interrupts.o(i.IRQ038_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[56]">IRQ039_Handler</a> from hc32f460_interrupts.o(i.IRQ039_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[57]">IRQ040_Handler</a> from hc32f460_interrupts.o(i.IRQ040_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[58]">IRQ041_Handler</a> from hc32f460_interrupts.o(i.IRQ041_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[59]">IRQ042_Handler</a> from hc32f460_interrupts.o(i.IRQ042_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[5a]">IRQ043_Handler</a> from hc32f460_interrupts.o(i.IRQ043_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[5b]">IRQ044_Handler</a> from hc32f460_interrupts.o(i.IRQ044_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[5c]">IRQ045_Handler</a> from hc32f460_interrupts.o(i.IRQ045_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[5d]">IRQ046_Handler</a> from hc32f460_interrupts.o(i.IRQ046_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[5e]">IRQ047_Handler</a> from hc32f460_interrupts.o(i.IRQ047_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[5f]">IRQ048_Handler</a> from hc32f460_interrupts.o(i.IRQ048_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[60]">IRQ049_Handler</a> from hc32f460_interrupts.o(i.IRQ049_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[61]">IRQ050_Handler</a> from hc32f460_interrupts.o(i.IRQ050_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[62]">IRQ051_Handler</a> from hc32f460_interrupts.o(i.IRQ051_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[63]">IRQ052_Handler</a> from hc32f460_interrupts.o(i.IRQ052_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[64]">IRQ053_Handler</a> from hc32f460_interrupts.o(i.IRQ053_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[65]">IRQ054_Handler</a> from hc32f460_interrupts.o(i.IRQ054_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[66]">IRQ055_Handler</a> from hc32f460_interrupts.o(i.IRQ055_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[67]">IRQ056_Handler</a> from hc32f460_interrupts.o(i.IRQ056_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[68]">IRQ057_Handler</a> from hc32f460_interrupts.o(i.IRQ057_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[69]">IRQ058_Handler</a> from hc32f460_interrupts.o(i.IRQ058_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6a]">IRQ059_Handler</a> from hc32f460_interrupts.o(i.IRQ059_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6b]">IRQ060_Handler</a> from hc32f460_interrupts.o(i.IRQ060_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6c]">IRQ061_Handler</a> from hc32f460_interrupts.o(i.IRQ061_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6d]">IRQ062_Handler</a> from hc32f460_interrupts.o(i.IRQ062_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6e]">IRQ063_Handler</a> from hc32f460_interrupts.o(i.IRQ063_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6f]">IRQ064_Handler</a> from hc32f460_interrupts.o(i.IRQ064_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[70]">IRQ065_Handler</a> from hc32f460_interrupts.o(i.IRQ065_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[71]">IRQ066_Handler</a> from hc32f460_interrupts.o(i.IRQ066_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[72]">IRQ067_Handler</a> from hc32f460_interrupts.o(i.IRQ067_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[73]">IRQ068_Handler</a> from hc32f460_interrupts.o(i.IRQ068_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[74]">IRQ069_Handler</a> from hc32f460_interrupts.o(i.IRQ069_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[75]">IRQ070_Handler</a> from hc32f460_interrupts.o(i.IRQ070_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[76]">IRQ071_Handler</a> from hc32f460_interrupts.o(i.IRQ071_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[77]">IRQ072_Handler</a> from hc32f460_interrupts.o(i.IRQ072_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[78]">IRQ073_Handler</a> from hc32f460_interrupts.o(i.IRQ073_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[79]">IRQ074_Handler</a> from hc32f460_interrupts.o(i.IRQ074_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7a]">IRQ075_Handler</a> from hc32f460_interrupts.o(i.IRQ075_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7b]">IRQ076_Handler</a> from hc32f460_interrupts.o(i.IRQ076_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7c]">IRQ077_Handler</a> from hc32f460_interrupts.o(i.IRQ077_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7d]">IRQ078_Handler</a> from hc32f460_interrupts.o(i.IRQ078_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7e]">IRQ079_Handler</a> from hc32f460_interrupts.o(i.IRQ079_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7f]">IRQ080_Handler</a> from hc32f460_interrupts.o(i.IRQ080_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[80]">IRQ081_Handler</a> from hc32f460_interrupts.o(i.IRQ081_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[81]">IRQ082_Handler</a> from hc32f460_interrupts.o(i.IRQ082_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[82]">IRQ083_Handler</a> from hc32f460_interrupts.o(i.IRQ083_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[83]">IRQ084_Handler</a> from hc32f460_interrupts.o(i.IRQ084_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[84]">IRQ085_Handler</a> from hc32f460_interrupts.o(i.IRQ085_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[85]">IRQ086_Handler</a> from hc32f460_interrupts.o(i.IRQ086_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[86]">IRQ087_Handler</a> from hc32f460_interrupts.o(i.IRQ087_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[87]">IRQ088_Handler</a> from hc32f460_interrupts.o(i.IRQ088_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[88]">IRQ089_Handler</a> from hc32f460_interrupts.o(i.IRQ089_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[89]">IRQ090_Handler</a> from hc32f460_interrupts.o(i.IRQ090_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8a]">IRQ091_Handler</a> from hc32f460_interrupts.o(i.IRQ091_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8b]">IRQ092_Handler</a> from hc32f460_interrupts.o(i.IRQ092_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8c]">IRQ093_Handler</a> from hc32f460_interrupts.o(i.IRQ093_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8d]">IRQ094_Handler</a> from hc32f460_interrupts.o(i.IRQ094_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8e]">IRQ095_Handler</a> from hc32f460_interrupts.o(i.IRQ095_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8f]">IRQ096_Handler</a> from hc32f460_interrupts.o(i.IRQ096_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[90]">IRQ097_Handler</a> from hc32f460_interrupts.o(i.IRQ097_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[91]">IRQ098_Handler</a> from hc32f460_interrupts.o(i.IRQ098_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[92]">IRQ099_Handler</a> from hc32f460_interrupts.o(i.IRQ099_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[93]">IRQ100_Handler</a> from hc32f460_interrupts.o(i.IRQ100_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[94]">IRQ101_Handler</a> from hc32f460_interrupts.o(i.IRQ101_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[95]">IRQ102_Handler</a> from hc32f460_interrupts.o(i.IRQ102_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[96]">IRQ103_Handler</a> from hc32f460_interrupts.o(i.IRQ103_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[97]">IRQ104_Handler</a> from hc32f460_interrupts.o(i.IRQ104_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[98]">IRQ105_Handler</a> from hc32f460_interrupts.o(i.IRQ105_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[99]">IRQ106_Handler</a> from hc32f460_interrupts.o(i.IRQ106_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[9a]">IRQ107_Handler</a> from hc32f460_interrupts.o(i.IRQ107_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[9b]">IRQ108_Handler</a> from hc32f460_interrupts.o(i.IRQ108_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[9c]">IRQ109_Handler</a> from hc32f460_interrupts.o(i.IRQ109_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[9d]">IRQ110_Handler</a> from hc32f460_interrupts.o(i.IRQ110_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[9e]">IRQ111_Handler</a> from hc32f460_interrupts.o(i.IRQ111_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[9f]">IRQ112_Handler</a> from hc32f460_interrupts.o(i.IRQ112_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[a0]">IRQ113_Handler</a> from hc32f460_interrupts.o(i.IRQ113_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[a1]">IRQ114_Handler</a> from hc32f460_interrupts.o(i.IRQ114_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[a2]">IRQ115_Handler</a> from hc32f460_interrupts.o(i.IRQ115_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[a3]">IRQ116_Handler</a> from hc32f460_interrupts.o(i.IRQ116_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[a4]">IRQ117_Handler</a> from hc32f460_interrupts.o(i.IRQ117_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[a5]">IRQ118_Handler</a> from hc32f460_interrupts.o(i.IRQ118_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[a6]">IRQ119_Handler</a> from hc32f460_interrupts.o(i.IRQ119_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[a7]">IRQ120_Handler</a> from hc32f460_interrupts.o(i.IRQ120_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[a8]">IRQ121_Handler</a> from hc32f460_interrupts.o(i.IRQ121_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[a9]">IRQ122_Handler</a> from hc32f460_interrupts.o(i.IRQ122_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[aa]">IRQ123_Handler</a> from hc32f460_interrupts.o(i.IRQ123_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[ab]">IRQ124_Handler</a> from hc32f460_interrupts.o(i.IRQ124_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[ac]">IRQ125_Handler</a> from hc32f460_interrupts.o(i.IRQ125_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[ad]">IRQ126_Handler</a> from hc32f460_interrupts.o(i.IRQ126_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[ae]">IRQ127_Handler</a> from hc32f460_interrupts.o(i.IRQ127_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[af]">IRQ128_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[b0]">IRQ129_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[b1]">IRQ130_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[b2]">IRQ131_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[b3]">IRQ132_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[b4]">IRQ133_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[b5]">IRQ134_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[b6]">IRQ135_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[b7]">IRQ136_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[b8]">IRQ137_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[b9]">IRQ138_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[ba]">IRQ139_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[bb]">IRQ140_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[bc]">IRQ141_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[bd]">IRQ142_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[be]">IRQ143_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[28]">MemManage_Handler</a> from hc32f460_interrupts.o(i.MemManage_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[26]">NMI_Handler</a> from hc32f460_interrupts.o(i.NMI_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2d]">PendSV_Handler</a> from hc32f460_interrupts.o(i.PendSV_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[25]">Reset_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2b]">SVC_Handler</a> from hc32f460_interrupts.o(i.SVC_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2e]">SysTick_Handler</a> from hc32f460_interrupts.o(i.SysTick_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[c0]">SystemInit</a> from system_hc32f460.o(i.SystemInit) referenced from startup_hc32f460.o(.text)
 <LI><a href="#[c2]">USB_IRQ_Handler</a> from usb_bsp.o(i.USB_IRQ_Handler) referenced from usb_bsp.o(i.hd_usb_bsp_nvicconfig)
 <LI><a href="#[2a]">UsageFault_Handler</a> from hc32f460_interrupts.o(i.UsageFault_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[c1]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_hc32f460.o(.text)
 <LI><a href="#[16]">hd_usb_ctrlconn</a> from usb_dev_core.o(i.hd_usb_ctrlconn) referenced 2 times from usb_dev_core.o(.data)
 <LI><a href="#[1c]">hd_usb_datain_process</a> from usb_dev_core.o(i.hd_usb_datain_process) referenced 2 times from usb_dev_core.o(.data)
 <LI><a href="#[1b]">hd_usb_dataout_process</a> from usb_dev_core.o(i.hd_usb_dataout_process) referenced 2 times from usb_dev_core.o(.data)
 <LI><a href="#[5]">hd_usb_dev_configstrdesc</a> from usb_dev_desc.o(i.hd_usb_dev_configstrdesc) referenced 2 times from usb_dev_desc.o(.data)
 <LI><a href="#[0]">hd_usb_dev_desc</a> from usb_dev_desc.o(i.hd_usb_dev_desc) referenced 2 times from usb_dev_desc.o(.data)
 <LI><a href="#[6]">hd_usb_dev_intfstrdesc</a> from usb_dev_desc.o(i.hd_usb_dev_intfstrdesc) referenced 2 times from usb_dev_desc.o(.data)
 <LI><a href="#[1]">hd_usb_dev_langiddesc</a> from usb_dev_desc.o(i.hd_usb_dev_langiddesc) referenced 2 times from usb_dev_desc.o(.data)
 <LI><a href="#[2]">hd_usb_dev_manufacturerstr</a> from usb_dev_desc.o(i.hd_usb_dev_manufacturerstr) referenced 2 times from usb_dev_desc.o(.data)
 <LI><a href="#[3]">hd_usb_dev_productdesc</a> from usb_dev_desc.o(i.hd_usb_dev_productdesc) referenced 2 times from usb_dev_desc.o(.data)
 <LI><a href="#[18]">hd_usb_dev_resume</a> from usb_dev_core.o(i.hd_usb_dev_resume) referenced 2 times from usb_dev_core.o(.data)
 <LI><a href="#[15]">hd_usb_dev_rst</a> from usb_dev_core.o(i.hd_usb_dev_rst) referenced 2 times from usb_dev_core.o(.data)
 <LI><a href="#[4]">hd_usb_dev_serialstr</a> from usb_dev_desc.o(i.hd_usb_dev_serialstr) referenced 2 times from usb_dev_desc.o(.data)
 <LI><a href="#[17]">hd_usb_dev_susp</a> from usb_dev_core.o(i.hd_usb_dev_susp) referenced 2 times from usb_dev_core.o(.data)
 <LI><a href="#[1d]">hd_usb_isoinincomplt_process</a> from usb_dev_core.o(i.hd_usb_isoinincomplt_process) referenced 2 times from usb_dev_core.o(.data)
 <LI><a href="#[1e]">hd_usb_isooutincomplt_process</a> from usb_dev_core.o(i.hd_usb_isooutincomplt_process) referenced 2 times from usb_dev_core.o(.data)
 <LI><a href="#[1a]">hd_usb_setup_process</a> from usb_dev_core.o(i.hd_usb_setup_process) referenced 2 times from usb_dev_core.o(.data)
 <LI><a href="#[19]">hd_usb_sof_process</a> from usb_dev_core.o(i.hd_usb_sof_process) referenced 2 times from usb_dev_core.o(.data)
 <LI><a href="#[bf]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[8]">msc_getcapacity</a> from usb_dev_msc_msd.o(i.msc_getcapacity) referenced 2 times from usb_dev_msc_msd.o(.data)
 <LI><a href="#[9]">msc_getmaxlun</a> from usb_dev_msc_msd.o(i.msc_getmaxlun) referenced 2 times from usb_dev_msc_msd.o(.data)
 <LI><a href="#[a]">msc_ifready</a> from usb_dev_msc_msd.o(i.msc_ifready) referenced 2 times from usb_dev_msc_msd.o(.data)
 <LI><a href="#[d]">msc_ifwrprotected</a> from usb_dev_msc_msd.o(i.msc_ifwrprotected) referenced 2 times from usb_dev_msc_msd.o(.data)
 <LI><a href="#[7]">msc_init</a> from usb_dev_msc_msd.o(i.msc_init) referenced 2 times from usb_dev_msc_msd.o(.data)
 <LI><a href="#[b]">msc_read</a> from usb_dev_msc_msd.o(i.msc_read) referenced 2 times from usb_dev_msc_msd.o(.data)
 <LI><a href="#[c]">msc_write</a> from usb_dev_msc_msd.o(i.msc_write) referenced 2 times from usb_dev_msc_msd.o(.data)
 <LI><a href="#[23]">usb_dev_msc_datain</a> from usb_dev_msc_class.o(i.usb_dev_msc_datain) referenced 2 times from usb_dev_msc_class.o(.data)
 <LI><a href="#[24]">usb_dev_msc_dataout</a> from usb_dev_msc_class.o(i.usb_dev_msc_dataout) referenced 2 times from usb_dev_msc_class.o(.data)
 <LI><a href="#[20]">usb_dev_msc_deinit</a> from usb_dev_msc_class.o(i.usb_dev_msc_deinit) referenced 2 times from usb_dev_msc_class.o(.data)
 <LI><a href="#[22]">usb_dev_msc_getcfgdesc</a> from usb_dev_msc_class.o(i.usb_dev_msc_getcfgdesc) referenced 2 times from usb_dev_msc_class.o(.data)
 <LI><a href="#[1f]">usb_dev_msc_init</a> from usb_dev_msc_class.o(i.usb_dev_msc_init) referenced 2 times from usb_dev_msc_class.o(.data)
 <LI><a href="#[21]">usb_dev_msc_setup</a> from usb_dev_msc_class.o(i.usb_dev_msc_setup) referenced 2 times from usb_dev_msc_class.o(.data)
 <LI><a href="#[13]">usb_dev_user_conn</a> from usb_dev_user.o(i.usb_dev_user_conn) referenced 2 times from usb_dev_user.o(.data)
 <LI><a href="#[10]">usb_dev_user_devcfg</a> from usb_dev_user.o(i.usb_dev_user_devcfg) referenced 2 times from usb_dev_user.o(.data)
 <LI><a href="#[12]">usb_dev_user_devresume</a> from usb_dev_user.o(i.usb_dev_user_devresume) referenced 2 times from usb_dev_user.o(.data)
 <LI><a href="#[11]">usb_dev_user_devsusp</a> from usb_dev_user.o(i.usb_dev_user_devsusp) referenced 2 times from usb_dev_user.o(.data)
 <LI><a href="#[14]">usb_dev_user_disconn</a> from usb_dev_user.o(i.usb_dev_user_disconn) referenced 2 times from usb_dev_user.o(.data)
 <LI><a href="#[e]">usb_dev_user_init</a> from usb_dev_user.o(i.usb_dev_user_init) referenced 2 times from usb_dev_user.o(.data)
 <LI><a href="#[f]">usb_dev_user_rst</a> from usb_dev_user.o(i.usb_dev_user_rst) referenced 2 times from usb_dev_user.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[c1]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(.text)
</UL>
<P><STRONG><a name="[163]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[c6]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ce]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[164]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[165]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[166]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[167]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[168]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[169]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[25]"></a>Reset_Handler</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>IRQ128_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>IRQ129_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>IRQ130_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>IRQ131_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>IRQ132_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>IRQ133_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>IRQ134_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>IRQ135_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>IRQ136_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>IRQ137_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>IRQ138_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>IRQ139_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[bb]"></a>IRQ140_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>IRQ141_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>IRQ142_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>IRQ143_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[c8]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_processwrite
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_processread
</UL>

<P><STRONG><a name="[f4]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualFATWrite
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualFATRead
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualFAT_WriteBlock
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualFAT_ReadBlock
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFLASHFileBlock
</UL>

<P><STRONG><a name="[16a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[16c]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualFAT_ReadBlock
</UL>

<P><STRONG><a name="[d0]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CLK_Init
</UL>

<P><STRONG><a name="[16e]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[16f]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[170]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[171]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>Ddl_AssertHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hc32f460_utility.o(i.Ddl_AssertHandler))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enIrqRegistration
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg1PeriphClockCmd
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_UpllConfig
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_UpllCmd
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetUsbClkSource
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetFlagStatus
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_DebugPortSetting
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SingleProgram
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SetLatency
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SectorErase
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_FlashCmd
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_ErasePgmCmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalCmd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysClkConfig
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClkSource
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetPllSource
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_MpllConfig
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_MpllCmd
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_IrqHandler
</UL>

<P><STRONG><a name="[172]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>BSP_CLK_Init</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, ev_hc32f460_lqfp100_v2.o(i.BSP_CLK_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BSP_CLK_Init &rArr; CLK_SetSysClkSource &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetFlagStatus
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Unlock
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SetLatency
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Lock
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_HS2HP
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalConfig
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalCmd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysClkConfig
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClkSource
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetPllSource
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_MpllConfig
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_MpllCmd
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29]"></a>BusFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.BusFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>CLK_GetFlagStatus</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, hc32f460_clk.o(i.CLK_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLK_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_UpllCmd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbClkIni
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CLK_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalCmd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_MpllCmd
</UL>

<P><STRONG><a name="[da]"></a>CLK_MpllCmd</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, hc32f460_clk.o(i.CLK_MpllCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLK_MpllCmd &rArr; CLK_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetFlagStatus
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CLK_Init
</UL>

<P><STRONG><a name="[d9]"></a>CLK_MpllConfig</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, hc32f460_clk.o(i.CLK_MpllConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLK_MpllConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CLK_Init
</UL>

<P><STRONG><a name="[d8]"></a>CLK_SetPllSource</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, hc32f460_clk.o(i.CLK_SetPllSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_SetPllSource
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CLK_Init
</UL>

<P><STRONG><a name="[dd]"></a>CLK_SetSysClkSource</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, hc32f460_clk.o(i.CLK_SetSysClkSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLK_SetSysClkSource &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CLK_Init
</UL>

<P><STRONG><a name="[e2]"></a>CLK_SetUsbClkSource</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, hc32f460_clk.o(i.CLK_SetUsbClkSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_SetUsbClkSource
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbClkIni
</UL>

<P><STRONG><a name="[d1]"></a>CLK_SysClkConfig</STRONG> (Thumb, 366 bytes, Stack size 32 bytes, hc32f460_clk.o(i.CLK_SysClkConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLK_SysClkConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CLK_Init
</UL>

<P><STRONG><a name="[e3]"></a>CLK_UpllCmd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, hc32f460_clk.o(i.CLK_UpllCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLK_UpllCmd &rArr; CLK_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetFlagStatus
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbClkIni
</UL>

<P><STRONG><a name="[e4]"></a>CLK_UpllConfig</STRONG> (Thumb, 380 bytes, Stack size 16 bytes, hc32f460_clk.o(i.CLK_UpllConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLK_UpllConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbClkIni
</UL>

<P><STRONG><a name="[d3]"></a>CLK_XtalCmd</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, hc32f460_clk.o(i.CLK_XtalCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLK_XtalCmd &rArr; CLK_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetFlagStatus
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CLK_Init
</UL>

<P><STRONG><a name="[d2]"></a>CLK_XtalConfig</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, hc32f460_clk.o(i.CLK_XtalConfig))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CLK_Init
</UL>

<P><STRONG><a name="[f2]"></a>Ddl_Delay1ms</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hc32f460_utility.o(i.Ddl_Delay1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ddl_Delay1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_HS2HP
</UL>

<P><STRONG><a name="[2c]"></a>DebugMon_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.DebugMon_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[e8]"></a>EFM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hc32f460_efm.o(i.EFM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SingleProgram
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SectorErase
</UL>

<P><STRONG><a name="[e5]"></a>EFM_ErasePgmCmd</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hc32f460_efm.o(i.EFM_ErasePgmCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EFM_ErasePgmCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SingleProgram
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SectorErase
</UL>

<P><STRONG><a name="[e6]"></a>EFM_FlashCmd</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hc32f460_efm.o(i.EFM_FlashCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EFM_FlashCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualFlashProgram
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualFlashErase
</UL>

<P><STRONG><a name="[d7]"></a>EFM_Lock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f460_efm.o(i.EFM_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CLK_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualFlashProgram
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualFlashErase
</UL>

<P><STRONG><a name="[e7]"></a>EFM_SectorErase</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, hc32f460_efm.o(i.EFM_SectorErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EFM_SectorErase &rArr; EFM_ErasePgmCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_ErasePgmCmd
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_ClearFlag
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualFlashErase
</UL>

<P><STRONG><a name="[d6]"></a>EFM_SetLatency</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, hc32f460_efm.o(i.EFM_SetLatency))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EFM_SetLatency
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CLK_Init
</UL>

<P><STRONG><a name="[e9]"></a>EFM_SingleProgram</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, hc32f460_efm.o(i.EFM_SingleProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EFM_SingleProgram &rArr; EFM_ErasePgmCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_ErasePgmCmd
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_ClearFlag
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualFlashProgram
</UL>

<P><STRONG><a name="[d5]"></a>EFM_Unlock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f460_efm.o(i.EFM_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CLK_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualFlashProgram
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualFlashErase
</UL>

<P><STRONG><a name="[27]"></a>HardFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>IRQ000_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ000_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ000_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>IRQ001_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ001_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ001_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>IRQ002_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ002_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ002_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>IRQ003_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ003_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ003_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>IRQ004_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ004_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ004_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>IRQ005_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ005_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ005_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>IRQ006_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ006_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ006_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>IRQ007_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ007_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ007_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>IRQ008_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ008_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ008_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>IRQ009_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ009_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ009_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>IRQ010_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ010_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ010_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>IRQ011_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ011_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ011_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>IRQ012_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ012_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ012_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>IRQ013_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ013_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ013_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>IRQ014_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ014_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ014_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>IRQ015_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ015_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ015_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>IRQ016_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ016_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ016_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>IRQ017_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ017_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ017_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>IRQ018_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ018_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ018_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>IRQ019_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ019_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ019_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>IRQ020_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ020_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ020_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>IRQ021_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ021_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ021_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>IRQ022_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ022_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ022_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>IRQ023_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ023_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ023_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>IRQ024_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ024_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ024_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>IRQ025_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ025_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ025_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>IRQ026_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ026_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ026_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>IRQ027_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ027_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ027_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>IRQ028_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ028_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ028_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>IRQ029_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ029_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ029_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>IRQ030_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ030_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ030_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>IRQ031_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ031_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ031_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>IRQ032_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ032_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ032_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>IRQ033_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ033_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ033_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>IRQ034_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ034_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ034_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>IRQ035_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ035_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ035_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>IRQ036_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ036_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ036_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>IRQ037_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ037_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ037_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>IRQ038_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ038_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ038_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>IRQ039_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ039_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ039_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>IRQ040_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ040_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ040_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>IRQ041_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ041_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ041_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>IRQ042_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ042_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ042_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>IRQ043_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ043_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ043_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>IRQ044_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ044_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ044_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>IRQ045_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ045_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ045_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>IRQ046_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ046_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ046_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>IRQ047_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ047_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ047_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>IRQ048_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ048_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ048_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>IRQ049_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ049_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ049_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>IRQ050_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ050_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ050_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>IRQ051_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ051_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ051_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>IRQ052_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ052_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ052_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>IRQ053_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ053_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ053_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>IRQ054_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ054_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ054_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>IRQ055_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ055_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ055_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>IRQ056_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ056_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ056_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>IRQ057_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ057_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ057_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>IRQ058_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ058_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ058_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>IRQ059_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ059_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ059_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>IRQ060_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ060_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ060_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>IRQ061_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ061_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ061_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>IRQ062_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ062_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ062_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>IRQ063_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ063_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ063_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>IRQ064_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ064_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ064_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>IRQ065_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ065_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ065_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>IRQ066_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ066_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ066_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>IRQ067_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ067_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ067_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>IRQ068_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ068_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ068_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>IRQ069_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ069_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ069_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>IRQ070_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ070_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ070_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>IRQ071_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ071_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ071_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>IRQ072_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ072_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ072_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>IRQ073_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ073_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ073_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>IRQ074_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ074_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ074_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>IRQ075_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ075_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ075_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>IRQ076_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ076_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ076_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>IRQ077_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ077_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ077_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>IRQ078_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ078_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ078_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>IRQ079_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ079_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ079_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>IRQ080_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ080_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ080_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>IRQ081_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ081_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ081_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>IRQ082_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ082_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ082_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>IRQ083_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ083_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ083_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>IRQ084_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ084_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ084_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>IRQ085_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ085_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ085_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>IRQ086_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ086_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ086_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>IRQ087_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ087_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ087_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>IRQ088_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ088_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ088_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>IRQ089_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ089_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ089_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>IRQ090_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ090_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ090_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>IRQ091_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ091_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ091_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>IRQ092_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ092_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ092_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>IRQ093_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ093_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ093_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>IRQ094_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ094_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ094_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>IRQ095_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ095_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ095_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>IRQ096_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ096_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ096_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>IRQ097_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ097_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ097_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>IRQ098_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ098_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ098_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>IRQ099_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ099_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ099_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>IRQ100_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ100_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ100_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>IRQ101_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ101_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ101_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>IRQ102_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ102_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ102_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>IRQ103_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ103_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ103_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>IRQ104_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ104_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ104_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>IRQ105_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ105_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ105_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>IRQ106_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ106_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ106_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>IRQ107_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ107_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ107_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>IRQ108_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ108_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ108_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>IRQ109_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ109_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ109_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>IRQ110_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ110_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ110_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>IRQ111_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ111_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ111_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>IRQ112_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ112_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ112_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>IRQ113_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ113_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ113_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>IRQ114_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ114_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ114_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>IRQ115_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ115_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ115_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>IRQ116_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ116_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ116_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>IRQ117_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ117_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ117_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>IRQ118_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ118_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ118_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>IRQ119_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ119_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ119_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>IRQ120_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ120_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ120_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>IRQ121_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ121_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ121_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>IRQ122_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ122_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ122_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>IRQ123_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ123_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ123_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>IRQ124_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ124_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ124_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>IRQ125_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ125_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ125_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>IRQ126_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ126_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ126_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>IRQ127_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.IRQ127_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ127_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>MemManage_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.MemManage_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>NMI_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.NMI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NMI_Handler &rArr; NMI_IrqHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[c5]"></a>NMI_IrqHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hc32f460_exint_nmi_swi.o(i.NMI_IrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NMI_IrqHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>

<P><STRONG><a name="[df]"></a>PORT_DebugPortSetting</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, hc32f460_gpio.o(i.PORT_DebugPortSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PORT_DebugPortSetting
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Unlock
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Init
</UL>

<P><STRONG><a name="[ee]"></a>PORT_GetBit</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, hc32f460_gpio.o(i.PORT_GetBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PORT_GetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>PORT_Init</STRONG> (Thumb, 456 bytes, Stack size 32 bytes, hc32f460_gpio.o(i.PORT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Unlock
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_bsp_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Init
</UL>

<P><STRONG><a name="[ed]"></a>PORT_Lock</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hc32f460_gpio.o(i.PORT_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_DebugPortSetting
</UL>

<P><STRONG><a name="[ef]"></a>PORT_SetBits</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, hc32f460_gpio.o(i.PORT_SetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PORT_SetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f0]"></a>PORT_SetFunc</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, hc32f460_gpio.o(i.PORT_SetFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PORT_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Unlock
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_bsp_init
</UL>

<P><STRONG><a name="[ec]"></a>PORT_Unlock</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hc32f460_gpio.o(i.PORT_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_DebugPortSetting
</UL>

<P><STRONG><a name="[f1]"></a>PWC_Fcg1PeriphClockCmd</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hc32f460_pwc.o(i.PWC_Fcg1PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWC_Fcg1PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_bsp_init
</UL>

<P><STRONG><a name="[dc]"></a>PWC_HS2HP</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, hc32f460_pwc.o(i.PWC_HS2HP))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWC_HS2HP &rArr; Ddl_Delay1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_Delay1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CLK_Init
</UL>

<P><STRONG><a name="[2d]"></a>PendSV_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[f8]"></a>SRAM_CK_Disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hc32f460_sram.o(i.SRAM_CK_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_Init
</UL>

<P><STRONG><a name="[f6]"></a>SRAM_CK_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hc32f460_sram.o(i.SRAM_CK_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_Init
</UL>

<P><STRONG><a name="[d4]"></a>SRAM_Init</STRONG> (Thumb, 350 bytes, Stack size 24 bytes, hc32f460_sram.o(i.SRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SRAM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_WT_Enable
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_WT_Disable
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_CK_Enable
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_CK_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CLK_Init
</UL>

<P><STRONG><a name="[f7]"></a>SRAM_WT_Disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hc32f460_sram.o(i.SRAM_WT_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_Init
</UL>

<P><STRONG><a name="[f5]"></a>SRAM_WT_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hc32f460_sram.o(i.SRAM_WT_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_Init
</UL>

<P><STRONG><a name="[2b]"></a>SVC_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.SVC_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[e1]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, system_hc32f460.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClkSource
</UL>

<P><STRONG><a name="[c0]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, system_hc32f460.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(.text)
</UL>
<P><STRONG><a name="[c2]"></a>USB_IRQ_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usb_bsp.o(i.USB_IRQ_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USB_IRQ_Handler &rArr; hd_usb_isr_handler &rArr; hd_usb_inep_isr &rArr; hd_usb_wrblanktxfifo &rArr; hd_usb_wrpkt
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_isr_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_bsp.o(i.hd_usb_bsp_nvicconfig)
</UL>
<P><STRONG><a name="[2a]"></a>UsageFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.UsageFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[fc]"></a>VirtualFATRead</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, virtualfat.o(i.VirtualFATRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = VirtualFATRead &rArr; VirtualFAT_ReadBlock &rArr; UpdateFAT12ClusterChain &rArr; UpdateFAT12ClusterEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualFAT_ReadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_read
</UL>

<P><STRONG><a name="[fe]"></a>VirtualFATWrite</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, virtualfat.o(i.VirtualFATWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = VirtualFATWrite &rArr; VirtualFAT_WriteBlock &rArr; WriteFLASHFileBlock &rArr; VirtualFlashProgram &rArr; EFM_SingleProgram &rArr; EFM_ErasePgmCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualFAT_WriteBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_write
</UL>

<P><STRONG><a name="[fd]"></a>VirtualFAT_ReadBlock</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, virtualfat.o(i.VirtualFAT_ReadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VirtualFAT_ReadBlock &rArr; UpdateFAT12ClusterChain &rArr; UpdateFAT12ClusterEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFAT12ClusterEntry
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFAT12ClusterChain
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFLASHFileBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualFATRead
</UL>

<P><STRONG><a name="[ff]"></a>VirtualFAT_WriteBlock</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, virtualfat.o(i.VirtualFAT_WriteBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = VirtualFAT_WriteBlock &rArr; WriteFLASHFileBlock &rArr; VirtualFlashProgram &rArr; EFM_SingleProgram &rArr; EFM_ErasePgmCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFLASHFileBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualFATWrite
</UL>

<P><STRONG><a name="[101]"></a>VirtualFlashErase</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, virtualflash.o(i.VirtualFlashErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VirtualFlashErase &rArr; EFM_SectorErase &rArr; EFM_ErasePgmCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Unlock
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SectorErase
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Lock
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_FlashCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFLASHFileBlock
</UL>

<P><STRONG><a name="[102]"></a>VirtualFlashProgram</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, virtualflash.o(i.VirtualFlashProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VirtualFlashProgram &rArr; EFM_SingleProgram &rArr; EFM_ErasePgmCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Unlock
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SingleProgram
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Lock
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_FlashCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFLASHFileBlock
</UL>

<P><STRONG><a name="[174]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[175]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[176]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[103]"></a>enIrqRegistration</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, hc32f460_interrupts.o(i.enIrqRegistration))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = enIrqRegistration
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_bsp_nvicconfig
</UL>

<P><STRONG><a name="[eb]"></a>enIrqResign</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hc32f460_interrupts.o(i.enIrqResign))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = enIrqResign
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToBootloader
</UL>

<P><STRONG><a name="[13b]"></a>hd_usb_addrset</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usb_dev_driver.o(i.hd_usb_addrset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hd_usb_addrset
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_setaddr
</UL>

<P><STRONG><a name="[104]"></a>hd_usb_bsp_init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, usb_bsp.o(i.hd_usb_bsp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hd_usb_bsp_init &rArr; UsbClkIni &rArr; CLK_UpllCmd &rArr; CLK_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg1PeriphClockCmd
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbClkIni
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_dev_init
</UL>

<P><STRONG><a name="[105]"></a>hd_usb_bsp_nvicconfig</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, usb_bsp.o(i.hd_usb_bsp_nvicconfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hd_usb_bsp_nvicconfig &rArr; enIrqRegistration
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enIrqRegistration
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_dev_init
</UL>

<P><STRONG><a name="[10a]"></a>hd_usb_clearepstall</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, usb_core_driver.o(i.hd_usb_clearepstall))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hd_usb_clearepstall
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_clrstall
</UL>

<P><STRONG><a name="[106]"></a>hd_usb_clrfeature</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, usb_dev_stdreq.o(i.hd_usb_clrfeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = hd_usb_clrfeature &rArr; hd_usb_ctrlstatustx &rArr; hd_usb_deveptx &rArr; hd_usb_epntransbegin &rArr; hd_usb_wrpkt
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_ctrlerr
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_ctrlstatustx
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_standarddevreq
</UL>

<P><STRONG><a name="[109]"></a>hd_usb_clrstall</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, usb_dev_driver.o(i.hd_usb_clrstall))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = hd_usb_clrstall &rArr; hd_usb_clearepstall
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_clearepstall
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_standardepreq
</UL>

<P><STRONG><a name="[10b]"></a>hd_usb_coresoftrst</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, usb_core_driver.o(i.hd_usb_coresoftrst))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hd_usb_coresoftrst &rArr; hd_usb_udelay
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_initusbcore
</UL>

<P><STRONG><a name="[16]"></a>hd_usb_ctrlconn</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usb_dev_core.o(i.hd_usb_ctrlconn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hd_usb_ctrlconn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_dev_core.o(.data)
</UL>
<P><STRONG><a name="[10d]"></a>hd_usb_ctrldatatx</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usb_dev_ctrleptrans.o(i.hd_usb_ctrldatatx))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = hd_usb_ctrldatatx &rArr; hd_usb_deveptx &rArr; hd_usb_epntransbegin &rArr; hd_usb_wrpkt
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_deveptx
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dev_msc_setup
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_getstatus
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_getintf
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_getdesc
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_getconfig
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_standardepreq
</UL>

<P><STRONG><a name="[108]"></a>hd_usb_ctrlerr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usb_dev_stdreq.o(i.hd_usb_ctrlerr))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = hd_usb_ctrlerr &rArr; hd_usb_stalldevep &rArr; hd_usb_setepstall
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_ep0outstart
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_stalldevep
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dev_msc_setup
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_setconfig
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_setaddr
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_getstatus
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_getdesc
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_getconfig
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_clrfeature
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_standarditfreq
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_standardepreq
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_standarddevreq
</UL>

<P><STRONG><a name="[111]"></a>hd_usb_ctrlstatusrx</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usb_dev_ctrleptrans.o(i.hd_usb_ctrlstatusrx))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = hd_usb_ctrlstatusrx &rArr; hd_usb_readytorx &rArr; hd_usb_epntransbegin &rArr; hd_usb_wrpkt
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_readytorx
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_datain_process
</UL>

<P><STRONG><a name="[107]"></a>hd_usb_ctrlstatustx</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usb_dev_ctrleptrans.o(i.hd_usb_ctrlstatustx))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = hd_usb_ctrlstatustx &rArr; hd_usb_deveptx &rArr; hd_usb_epntransbegin &rArr; hd_usb_wrpkt
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_deveptx
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_setfeature
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_setconfig
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_setaddr
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_clrfeature
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_standarditfreq
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_standardepreq
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_dataout_process
</UL>

<P><STRONG><a name="[1c]"></a>hd_usb_datain_process</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, usb_dev_core.o(i.hd_usb_datain_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = hd_usb_datain_process &rArr; hd_usb_ctrlstatusrx &rArr; hd_usb_readytorx &rArr; hd_usb_epntransbegin &rArr; hd_usb_wrpkt
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_deveptx
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_ctrlstatusrx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_dev_core.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>hd_usb_dataout_process</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, usb_dev_core.o(i.hd_usb_dataout_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = hd_usb_dataout_process &rArr; hd_usb_ctrlstatustx &rArr; hd_usb_deveptx &rArr; hd_usb_epntransbegin &rArr; hd_usb_wrpkt
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_readytorx
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_ctrlstatustx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_dev_core.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>hd_usb_dev_configstrdesc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usb_dev_desc.o(i.hd_usb_dev_configstrdesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hd_usb_dev_configstrdesc &rArr; hd_usb_getstring
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_getstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_dev_desc.o(.data)
</UL>
<P><STRONG><a name="[13d]"></a>hd_usb_dev_ctrlconfig</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, usb_dev_core.o(i.hd_usb_dev_ctrlconfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hd_usb_dev_ctrlconfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_setconfig
</UL>

<P><STRONG><a name="[0]"></a>hd_usb_dev_desc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_dev_desc.o(i.hd_usb_dev_desc))
<BR>[Address Reference Count : 1]<UL><LI> usb_dev_desc.o(.data)
</UL>
<P><STRONG><a name="[114]"></a>hd_usb_dev_init</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, usb_dev_core.o(i.hd_usb_dev_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = hd_usb_dev_init &rArr; hd_usb_bsp_init &rArr; UsbClkIni &rArr; CLK_UpllCmd &rArr; CLK_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_bsp_nvicconfig
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_bsp_init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_initdev
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6]"></a>hd_usb_dev_intfstrdesc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usb_dev_desc.o(i.hd_usb_dev_intfstrdesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hd_usb_dev_intfstrdesc &rArr; hd_usb_getstring
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_getstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_dev_desc.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>hd_usb_dev_langiddesc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_dev_desc.o(i.hd_usb_dev_langiddesc))
<BR>[Address Reference Count : 1]<UL><LI> usb_dev_desc.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>hd_usb_dev_manufacturerstr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usb_dev_desc.o(i.hd_usb_dev_manufacturerstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hd_usb_dev_manufacturerstr &rArr; hd_usb_getstring
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_getstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_dev_desc.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>hd_usb_dev_productdesc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usb_dev_desc.o(i.hd_usb_dev_productdesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hd_usb_dev_productdesc &rArr; hd_usb_getstring
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_getstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_dev_desc.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>hd_usb_dev_resume</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usb_dev_core.o(i.hd_usb_dev_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hd_usb_dev_resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_dev_core.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>hd_usb_dev_rst</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usb_dev_core.o(i.hd_usb_dev_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hd_usb_dev_rst &rArr; hd_usb_opendevep &rArr; hd_usb_epactive
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_opendevep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_dev_core.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>hd_usb_dev_serialstr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usb_dev_desc.o(i.hd_usb_dev_serialstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hd_usb_dev_serialstr &rArr; hd_usb_getstring
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_getstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_dev_desc.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>hd_usb_dev_susp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usb_dev_core.o(i.hd_usb_dev_susp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hd_usb_dev_susp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_dev_core.o(.data)
</UL>
<P><STRONG><a name="[11a]"></a>hd_usb_devepdis</STRONG> (Thumb, 618 bytes, Stack size 12 bytes, usb_core_driver.o(i.hd_usb_devepdis))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hd_usb_devepdis
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_devmodeinit
</UL>

<P><STRONG><a name="[10e]"></a>hd_usb_deveptx</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, usb_dev_driver.o(i.hd_usb_deveptx))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = hd_usb_deveptx &rArr; hd_usb_epntransbegin &rArr; hd_usb_wrpkt
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_epntransbegin
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_ep0transbegin
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_processread
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bot_txdata
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bot_txcsw
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_ctrldatatx
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_ctrlstatustx
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_datain_process
</UL>

<P><STRONG><a name="[11b]"></a>hd_usb_devinten</STRONG> (Thumb, 194 bytes, Stack size 12 bytes, usb_core_driver.o(i.hd_usb_devinten))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hd_usb_devinten
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_devmodeinit
</UL>

<P><STRONG><a name="[119]"></a>hd_usb_devmodeinit</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, usb_core_driver.o(i.hd_usb_devmodeinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = hd_usb_devmodeinit &rArr; hd_usb_devinten
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_devinten
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_devepdis
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_initdev
</UL>

<P><STRONG><a name="[11c]"></a>hd_usb_enumfinish_isr</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usb_dev_int.o(i.hd_usb_enumfinish_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hd_usb_enumfinish_isr &rArr; hd_usb_ep0activate
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_ep0activate
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_isr_handler
</UL>

<P><STRONG><a name="[11d]"></a>hd_usb_ep0activate</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, usb_core_driver.o(i.hd_usb_ep0activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hd_usb_ep0activate
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_enumfinish_isr
</UL>

<P><STRONG><a name="[110]"></a>hd_usb_ep0outstart</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usb_dev_driver.o(i.hd_usb_ep0outstart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hd_usb_ep0outstart &rArr; hd_usb_ep0revcfg
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_ep0revcfg
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_ctrlerr
</UL>

<P><STRONG><a name="[11e]"></a>hd_usb_ep0revcfg</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, usb_core_driver.o(i.hd_usb_ep0revcfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hd_usb_ep0revcfg
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_reset_isr
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_outep_isr
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_inep_isr
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_ep0outstart
</UL>

<P><STRONG><a name="[117]"></a>hd_usb_ep0transbegin</STRONG> (Thumb, 348 bytes, Stack size 28 bytes, usb_core_driver.o(i.hd_usb_ep0transbegin))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hd_usb_ep0transbegin
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_readytorx
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_deveptx
</UL>

<P><STRONG><a name="[137]"></a>hd_usb_epactive</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, usb_core_driver.o(i.hd_usb_epactive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hd_usb_epactive
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_opendevep
</UL>

<P><STRONG><a name="[144]"></a>hd_usb_epdeactive</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usb_core_driver.o(i.hd_usb_epdeactive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hd_usb_epdeactive
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_shutdevep
</UL>

<P><STRONG><a name="[118]"></a>hd_usb_epntransbegin</STRONG> (Thumb, 726 bytes, Stack size 28 bytes, usb_core_driver.o(i.hd_usb_epntransbegin))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = hd_usb_epntransbegin &rArr; hd_usb_wrpkt
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_wrpkt
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_readytorx
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_deveptx
</UL>

<P><STRONG><a name="[120]"></a>hd_usb_flsdevep</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usb_dev_driver.o(i.hd_usb_flsdevep))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hd_usb_flsdevep &rArr; hd_usb_txfifoflush &rArr; hd_usb_udelay
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_txfifoflush
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_rxfifoflush
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dev_msc_setup
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bot_init
</UL>

<P><STRONG><a name="[123]"></a>hd_usb_getconfig</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usb_dev_stdreq.o(i.hd_usb_getconfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = hd_usb_getconfig &rArr; hd_usb_ctrldatatx &rArr; hd_usb_deveptx &rArr; hd_usb_epntransbegin &rArr; hd_usb_wrpkt
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_ctrlerr
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_ctrldatatx
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_standarddevreq
</UL>

<P><STRONG><a name="[124]"></a>hd_usb_getdesc</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, usb_dev_stdreq.o(i.hd_usb_getdesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = hd_usb_getdesc &rArr; hd_usb_ctrldatatx &rArr; hd_usb_deveptx &rArr; hd_usb_epntransbegin &rArr; hd_usb_wrpkt
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_ctrlerr
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_ctrldatatx
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_standarddevreq
</UL>

<P><STRONG><a name="[125]"></a>hd_usb_getintf</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usb_dev_stdreq.o(i.hd_usb_getintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = hd_usb_getintf &rArr; hd_usb_ctrldatatx &rArr; hd_usb_deveptx &rArr; hd_usb_epntransbegin &rArr; hd_usb_wrpkt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_ctrldatatx
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_standarditfreq
</UL>

<P><STRONG><a name="[127]"></a>hd_usb_getlength</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_dev_stdreq.o(i.hd_usb_getlength))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_getstring
</UL>

<P><STRONG><a name="[14e]"></a>hd_usb_getrxcnt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_dev_ctrleptrans.o(i.hd_usb_getrxcnt))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bot_decode_cbw
</UL>

<P><STRONG><a name="[126]"></a>hd_usb_getstatus</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usb_dev_stdreq.o(i.hd_usb_getstatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = hd_usb_getstatus &rArr; hd_usb_ctrldatatx &rArr; hd_usb_deveptx &rArr; hd_usb_epntransbegin &rArr; hd_usb_wrpkt
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_ctrlerr
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_ctrldatatx
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_standarditfreq
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_standarddevreq
</UL>

<P><STRONG><a name="[113]"></a>hd_usb_getstring</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, usb_dev_stdreq.o(i.hd_usb_getstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hd_usb_getstring
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_getlength
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_dev_serialstr
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_dev_productdesc
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_dev_manufacturerstr
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_dev_intfstrdesc
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_dev_configstrdesc
</UL>

<P><STRONG><a name="[128]"></a>hd_usb_inep_isr</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, usb_dev_int.o(i.hd_usb_inep_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hd_usb_inep_isr &rArr; hd_usb_wrblanktxfifo &rArr; hd_usb_wrpkt
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_ep0revcfg
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_wrblanktxfifo
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_rddevinep
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_isr_handler
</UL>

<P><STRONG><a name="[115]"></a>hd_usb_initdev</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, usb_dev_driver.o(i.hd_usb_initdev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hd_usb_initdev &rArr; hd_usb_initusbcore &rArr; hd_usb_coresoftrst &rArr; hd_usb_udelay
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_setregaddr
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_modeset
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_initusbcore
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_devmodeinit
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_dev_init
</UL>

<P><STRONG><a name="[12c]"></a>hd_usb_initusbcore</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, usb_core_driver.o(i.hd_usb_initusbcore))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hd_usb_initusbcore &rArr; hd_usb_coresoftrst &rArr; hd_usb_udelay
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_mdelay
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_coresoftrst
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_initdev
</UL>

<P><STRONG><a name="[135]"></a>hd_usb_isoinincomplt_isr</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usb_dev_int.o(i.hd_usb_isoinincomplt_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hd_usb_isoinincomplt_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_isr_handler
</UL>

<P><STRONG><a name="[1d]"></a>hd_usb_isoinincomplt_process</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usb_dev_core.o(i.hd_usb_isoinincomplt_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hd_usb_isoinincomplt_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_dev_core.o(.data)
</UL>
<P><STRONG><a name="[136]"></a>hd_usb_isooutincomplt_isr</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usb_dev_int.o(i.hd_usb_isooutincomplt_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hd_usb_isooutincomplt_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_isr_handler
</UL>

<P><STRONG><a name="[1e]"></a>hd_usb_isooutincomplt_process</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usb_dev_core.o(i.hd_usb_isooutincomplt_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hd_usb_isooutincomplt_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_dev_core.o(.data)
</UL>
<P><STRONG><a name="[c3]"></a>hd_usb_isr_handler</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, usb_dev_int.o(i.hd_usb_isr_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = hd_usb_isr_handler &rArr; hd_usb_inep_isr &rArr; hd_usb_wrblanktxfifo &rArr; hd_usb_wrpkt
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_susp_isr
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_sof_isr
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_rxstsqlvl_isr
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_resume_isr
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_reset_isr
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_outep_isr
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_isooutincomplt_isr
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_isoinincomplt_isr
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_inep_isr
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_enumfinish_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQ_Handler
</UL>

<P><STRONG><a name="[12e]"></a>hd_usb_mdelay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usb_bsp.o(i.hd_usb_mdelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hd_usb_mdelay &rArr; hd_usb_udelay
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_modeset
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_initusbcore
</UL>

<P><STRONG><a name="[12d]"></a>hd_usb_modeset</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usb_core_driver.o(i.hd_usb_modeset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hd_usb_modeset &rArr; hd_usb_mdelay &rArr; hd_usb_udelay
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_mdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_initdev
</UL>

<P><STRONG><a name="[116]"></a>hd_usb_opendevep</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, usb_dev_driver.o(i.hd_usb_opendevep))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hd_usb_opendevep &rArr; hd_usb_epactive
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_epactive
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dev_msc_setup
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dev_msc_init
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_dev_rst
</UL>

<P><STRONG><a name="[12f]"></a>hd_usb_outep_isr</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, usb_dev_int.o(i.hd_usb_outep_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hd_usb_outep_isr &rArr; hd_usb_ep0revcfg
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_ep0revcfg
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_getoepintbit
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_isr_handler
</UL>

<P><STRONG><a name="[13f]"></a>hd_usb_parsesetupreq</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, usb_dev_stdreq.o(i.hd_usb_parsesetupreq))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_setup_process
</UL>

<P><STRONG><a name="[129]"></a>hd_usb_rddevinep</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, usb_dev_int.o(i.hd_usb_rddevinep))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hd_usb_rddevinep
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_inep_isr
</UL>

<P><STRONG><a name="[139]"></a>hd_usb_rdpkt</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, usb_core_driver.o(i.hd_usb_rdpkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = hd_usb_rdpkt
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_rxstsqlvl_isr
</UL>

<P><STRONG><a name="[112]"></a>hd_usb_readytorx</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, usb_dev_driver.o(i.hd_usb_readytorx))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = hd_usb_readytorx &rArr; hd_usb_epntransbegin &rArr; hd_usb_wrpkt
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_epntransbegin
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_ep0transbegin
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_write10
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_processwrite
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bot_txcsw
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bot_rst
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bot_init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bot_abort
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_ctrlstatusrx
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_dataout_process
</UL>

<P><STRONG><a name="[134]"></a>hd_usb_reset_isr</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, usb_dev_int.o(i.hd_usb_reset_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hd_usb_reset_isr &rArr; hd_usb_txfifoflush &rArr; hd_usb_udelay
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_txfifoflush
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_ep0revcfg
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_isr_handler
</UL>

<P><STRONG><a name="[130]"></a>hd_usb_resume_isr</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, usb_dev_int.o(i.hd_usb_resume_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hd_usb_resume_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_isr_handler
</UL>

<P><STRONG><a name="[122]"></a>hd_usb_rxfifoflush</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, usb_core_driver.o(i.hd_usb_rxfifoflush))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hd_usb_rxfifoflush &rArr; hd_usb_udelay
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_flsdevep
</UL>

<P><STRONG><a name="[133]"></a>hd_usb_rxstsqlvl_isr</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, usb_dev_int.o(i.hd_usb_rxstsqlvl_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = hd_usb_rxstsqlvl_isr &rArr; hd_usb_rdpkt
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_rdpkt
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_isr_handler
</UL>

<P><STRONG><a name="[13a]"></a>hd_usb_setaddr</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, usb_dev_stdreq.o(i.hd_usb_setaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = hd_usb_setaddr &rArr; hd_usb_ctrlstatustx &rArr; hd_usb_deveptx &rArr; hd_usb_epntransbegin &rArr; hd_usb_wrpkt
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_ctrlerr
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_addrset
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_ctrlstatustx
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_standarddevreq
</UL>

<P><STRONG><a name="[13c]"></a>hd_usb_setconfig</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, usb_dev_stdreq.o(i.hd_usb_setconfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = hd_usb_setconfig &rArr; hd_usb_ctrlstatustx &rArr; hd_usb_deveptx &rArr; hd_usb_epntransbegin &rArr; hd_usb_wrpkt
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_ctrlerr
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_ctrlstatustx
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_dev_ctrlconfig
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_standarddevreq
</UL>

<P><STRONG><a name="[145]"></a>hd_usb_setepstall</STRONG> (Thumb, 446 bytes, Stack size 12 bytes, usb_core_driver.o(i.hd_usb_setepstall))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hd_usb_setepstall
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_stalldevep
</UL>

<P><STRONG><a name="[13e]"></a>hd_usb_setfeature</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, usb_dev_stdreq.o(i.hd_usb_setfeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = hd_usb_setfeature &rArr; hd_usb_ctrlstatustx &rArr; hd_usb_deveptx &rArr; hd_usb_epntransbegin &rArr; hd_usb_wrpkt
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_ctrlstatustx
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_standarddevreq
</UL>

<P><STRONG><a name="[12b]"></a>hd_usb_setregaddr</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, usb_core_driver.o(i.hd_usb_setregaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hd_usb_setregaddr
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_initdev
</UL>

<P><STRONG><a name="[1a]"></a>hd_usb_setup_process</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, usb_dev_core.o(i.hd_usb_setup_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = hd_usb_setup_process &rArr; hd_usb_standarddevreq &rArr; hd_usb_getdesc &rArr; hd_usb_ctrldatatx &rArr; hd_usb_deveptx &rArr; hd_usb_epntransbegin &rArr; hd_usb_wrpkt
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_standarditfreq
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_standardepreq
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_standarddevreq
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_stalldevep
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_parsesetupreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_dev_core.o(.data)
</UL>
<P><STRONG><a name="[143]"></a>hd_usb_shutdevep</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, usb_dev_driver.o(i.hd_usb_shutdevep))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hd_usb_shutdevep &rArr; hd_usb_epdeactive
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_epdeactive
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dev_msc_setup
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dev_msc_deinit
</UL>

<P><STRONG><a name="[132]"></a>hd_usb_sof_isr</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usb_dev_int.o(i.hd_usb_sof_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hd_usb_sof_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_isr_handler
</UL>

<P><STRONG><a name="[19]"></a>hd_usb_sof_process</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usb_dev_core.o(i.hd_usb_sof_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hd_usb_sof_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_dev_core.o(.data)
</UL>
<P><STRONG><a name="[10f]"></a>hd_usb_stalldevep</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, usb_dev_driver.o(i.hd_usb_stalldevep))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = hd_usb_stalldevep &rArr; hd_usb_setepstall
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_setepstall
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bot_complete_clearfeature
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bot_abort
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_ctrlerr
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_standardepreq
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_setup_process
</UL>

<P><STRONG><a name="[140]"></a>hd_usb_standarddevreq</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, usb_dev_stdreq.o(i.hd_usb_standarddevreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = hd_usb_standarddevreq &rArr; hd_usb_getdesc &rArr; hd_usb_ctrldatatx &rArr; hd_usb_deveptx &rArr; hd_usb_epntransbegin &rArr; hd_usb_wrpkt
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_setfeature
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_setconfig
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_setaddr
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_getstatus
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_getdesc
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_getconfig
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_ctrlerr
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_clrfeature
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_setup_process
</UL>

<P><STRONG><a name="[142]"></a>hd_usb_standardepreq</STRONG> (Thumb, 416 bytes, Stack size 16 bytes, usb_dev_stdreq.o(i.hd_usb_standardepreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = hd_usb_standardepreq &rArr; hd_usb_ctrldatatx &rArr; hd_usb_deveptx &rArr; hd_usb_epntransbegin &rArr; hd_usb_wrpkt
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_ctrlerr
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_clrstall
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_ctrldatatx
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_stalldevep
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_ctrlstatustx
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_setup_process
</UL>

<P><STRONG><a name="[141]"></a>hd_usb_standarditfreq</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, usb_dev_stdreq.o(i.hd_usb_standarditfreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = hd_usb_standarditfreq &rArr; hd_usb_getstatus &rArr; hd_usb_ctrldatatx &rArr; hd_usb_deveptx &rArr; hd_usb_epntransbegin &rArr; hd_usb_wrpkt
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_getstatus
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_getintf
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_ctrlerr
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_ctrlstatustx
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_setup_process
</UL>

<P><STRONG><a name="[131]"></a>hd_usb_susp_isr</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, usb_dev_int.o(i.hd_usb_susp_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hd_usb_susp_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_isr_handler
</UL>

<P><STRONG><a name="[121]"></a>hd_usb_txfifoflush</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, usb_core_driver.o(i.hd_usb_txfifoflush))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hd_usb_txfifoflush &rArr; hd_usb_udelay
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_reset_isr
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_flsdevep
</UL>

<P><STRONG><a name="[10c]"></a>hd_usb_udelay</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usb_bsp.o(i.hd_usb_udelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hd_usb_udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_mdelay
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_txfifoflush
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_rxfifoflush
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_coresoftrst
</UL>

<P><STRONG><a name="[12a]"></a>hd_usb_wrblanktxfifo</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, usb_dev_int.o(i.hd_usb_wrblanktxfifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hd_usb_wrblanktxfifo &rArr; hd_usb_wrpkt
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_wrpkt
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rdineptxfspcavail
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_inep_isr
</UL>

<P><STRONG><a name="[11f]"></a>hd_usb_wrpkt</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, usb_core_driver.o(i.hd_usb_wrpkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hd_usb_wrpkt
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_epntransbegin
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_wrblanktxfifo
</UL>

<P><STRONG><a name="[bf]"></a>main</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = main &rArr; hd_usb_dev_init &rArr; hd_usb_bsp_init &rArr; UsbClkIni &rArr; CLK_UpllCmd &rArr; CLK_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_dev_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_Delay1ms
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CLK_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToBootloader
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[147]"></a>msc_bot_abort</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usb_dev_msc_bot.o(i.msc_bot_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = msc_bot_abort &rArr; hd_usb_readytorx &rArr; hd_usb_epntransbegin &rArr; hd_usb_wrpkt
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_stalldevep
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_readytorx
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bot_decode_cbw
</UL>

<P><STRONG><a name="[148]"></a>msc_bot_complete_clearfeature</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usb_dev_msc_bot.o(i.msc_bot_complete_clearfeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = msc_bot_complete_clearfeature &rArr; msc_bot_txcsw &rArr; hd_usb_readytorx &rArr; hd_usb_epntransbegin &rArr; hd_usb_wrpkt
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bot_txcsw
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_stalldevep
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dev_msc_setup
</UL>

<P><STRONG><a name="[14a]"></a>msc_bot_datain</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usb_dev_msc_bot.o(i.msc_bot_datain))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = msc_bot_datain &rArr; scsi_cmdprocess &rArr; scsi_write10 &rArr; scsi_processwrite &rArr; msc_bot_txcsw &rArr; hd_usb_readytorx &rArr; hd_usb_epntransbegin &rArr; hd_usb_wrpkt
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_cmdprocess
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bot_txcsw
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dev_msc_datain
</UL>

<P><STRONG><a name="[14c]"></a>msc_bot_dataout</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usb_dev_msc_bot.o(i.msc_bot_dataout))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = msc_bot_dataout &rArr; msc_bot_decode_cbw &rArr; scsi_cmdprocess &rArr; scsi_write10 &rArr; scsi_processwrite &rArr; msc_bot_txcsw &rArr; hd_usb_readytorx &rArr; hd_usb_epntransbegin &rArr; hd_usb_wrpkt
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_cmdprocess
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bot_txcsw
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bot_decode_cbw
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dev_msc_dataout
</UL>

<P><STRONG><a name="[14d]"></a>msc_bot_decode_cbw</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, usb_dev_msc_bot.o(i.msc_bot_decode_cbw))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = msc_bot_decode_cbw &rArr; scsi_cmdprocess &rArr; scsi_write10 &rArr; scsi_processwrite &rArr; msc_bot_txcsw &rArr; hd_usb_readytorx &rArr; hd_usb_epntransbegin &rArr; hd_usb_wrpkt
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_sensecode
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_cmdprocess
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bot_txdata
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bot_txcsw
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bot_abort
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_getrxcnt
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bot_dataout
</UL>

<P><STRONG><a name="[161]"></a>msc_bot_deinit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_dev_msc_bot.o(i.msc_bot_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dev_msc_deinit
</UL>

<P><STRONG><a name="[151]"></a>msc_bot_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usb_dev_msc_bot.o(i.msc_bot_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = msc_bot_init &rArr; hd_usb_readytorx &rArr; hd_usb_epntransbegin &rArr; hd_usb_wrpkt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_flsdevep
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_readytorx
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dev_msc_init
</UL>

<P><STRONG><a name="[152]"></a>msc_bot_rst</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usb_dev_msc_bot.o(i.msc_bot_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = msc_bot_rst &rArr; hd_usb_readytorx &rArr; hd_usb_epntransbegin &rArr; hd_usb_wrpkt
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_readytorx
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dev_msc_setup
</UL>

<P><STRONG><a name="[149]"></a>msc_bot_txcsw</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usb_dev_msc_bot.o(i.msc_bot_txcsw))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = msc_bot_txcsw &rArr; hd_usb_readytorx &rArr; hd_usb_epntransbegin &rArr; hd_usb_wrpkt
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_readytorx
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_deveptx
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_processwrite
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bot_decode_cbw
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bot_dataout
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bot_datain
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bot_complete_clearfeature
</UL>

<P><STRONG><a name="[150]"></a>msc_bot_txdata</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usb_dev_msc_bot.o(i.msc_bot_txdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = msc_bot_txdata &rArr; hd_usb_deveptx &rArr; hd_usb_epntransbegin &rArr; hd_usb_wrpkt
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_deveptx
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bot_decode_cbw
</UL>

<P><STRONG><a name="[8]"></a>msc_getcapacity</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_dev_msc_msd.o(i.msc_getcapacity))
<BR>[Address Reference Count : 1]<UL><LI> usb_dev_msc_msd.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>msc_getmaxlun</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usb_dev_msc_msd.o(i.msc_getmaxlun))
<BR>[Address Reference Count : 1]<UL><LI> usb_dev_msc_msd.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>msc_ifready</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb_dev_msc_msd.o(i.msc_ifready))
<BR>[Address Reference Count : 1]<UL><LI> usb_dev_msc_msd.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>msc_ifwrprotected</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_dev_msc_msd.o(i.msc_ifwrprotected))
<BR>[Address Reference Count : 1]<UL><LI> usb_dev_msc_msd.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>msc_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_dev_msc_msd.o(i.msc_init))
<BR>[Address Reference Count : 1]<UL><LI> usb_dev_msc_msd.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>msc_read</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, usb_dev_msc_msd.o(i.msc_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = msc_read &rArr; VirtualFATRead &rArr; VirtualFAT_ReadBlock &rArr; UpdateFAT12ClusterChain &rArr; UpdateFAT12ClusterEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualFATRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_dev_msc_msd.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>msc_write</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, usb_dev_msc_msd.o(i.msc_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = msc_write &rArr; VirtualFATWrite &rArr; VirtualFAT_WriteBlock &rArr; WriteFLASHFileBlock &rArr; VirtualFlashProgram &rArr; EFM_SingleProgram &rArr; EFM_ErasePgmCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualFATWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_dev_msc_msd.o(.data)
</UL>
<P><STRONG><a name="[153]"></a>scsi_addressrangecheck</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usb_dev_msc_scsi.o(i.scsi_addressrangecheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = scsi_addressrangecheck &rArr; scsi_sensecode
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_sensecode
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_write10
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_verify10
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_read10
</UL>

<P><STRONG><a name="[14b]"></a>scsi_cmdprocess</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, usb_dev_msc_scsi.o(i.scsi_cmdprocess))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = scsi_cmdprocess &rArr; scsi_write10 &rArr; scsi_processwrite &rArr; msc_bot_txcsw &rArr; hd_usb_readytorx &rArr; hd_usb_epntransbegin &rArr; hd_usb_wrpkt
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_write10
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_verify10
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_testunitready
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_startstopuint
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_requestsense
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_readformatcapacity
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_readcapacity10
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_read10
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_modesense6
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_modesense10
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_inquiry
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_sensecode
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bot_decode_cbw
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bot_dataout
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bot_datain
</UL>

<P><STRONG><a name="[156]"></a>scsi_inquiry</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, usb_dev_msc_scsi.o(i.scsi_inquiry))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = scsi_inquiry
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_cmdprocess
</UL>

<P><STRONG><a name="[159]"></a>scsi_modesense10</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb_dev_msc_scsi.o(i.scsi_modesense10))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_cmdprocess
</UL>

<P><STRONG><a name="[158]"></a>scsi_modesense6</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usb_dev_msc_scsi.o(i.scsi_modesense6))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_cmdprocess
</UL>

<P><STRONG><a name="[15f]"></a>scsi_processread</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, usb_dev_msc_scsi.o(i.scsi_processread))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = scsi_processread &rArr; hd_usb_deveptx &rArr; hd_usb_epntransbegin &rArr; hd_usb_wrpkt
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_sensecode
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_deveptx
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_read10
</UL>

<P><STRONG><a name="[160]"></a>scsi_processwrite</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, usb_dev_msc_scsi.o(i.scsi_processwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = scsi_processwrite &rArr; msc_bot_txcsw &rArr; hd_usb_readytorx &rArr; hd_usb_epntransbegin &rArr; hd_usb_wrpkt
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_sensecode
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bot_txcsw
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_readytorx
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_write10
</UL>

<P><STRONG><a name="[15c]"></a>scsi_read10</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, usb_dev_msc_scsi.o(i.scsi_read10))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = scsi_read10 &rArr; scsi_processread &rArr; hd_usb_deveptx &rArr; hd_usb_epntransbegin &rArr; hd_usb_wrpkt
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_processread
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_addressrangecheck
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_sensecode
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_cmdprocess
</UL>

<P><STRONG><a name="[15b]"></a>scsi_readcapacity10</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, usb_dev_msc_scsi.o(i.scsi_readcapacity10))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = scsi_readcapacity10 &rArr; scsi_sensecode
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_sensecode
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_cmdprocess
</UL>

<P><STRONG><a name="[15a]"></a>scsi_readformatcapacity</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, usb_dev_msc_scsi.o(i.scsi_readformatcapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = scsi_readformatcapacity &rArr; scsi_sensecode
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_sensecode
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_cmdprocess
</UL>

<P><STRONG><a name="[155]"></a>scsi_requestsense</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, usb_dev_msc_scsi.o(i.scsi_requestsense))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = scsi_requestsense
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_cmdprocess
</UL>

<P><STRONG><a name="[14f]"></a>scsi_sensecode</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usb_dev_msc_scsi.o(i.scsi_sensecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = scsi_sensecode
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_write10
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_verify10
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_testunitready
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_readformatcapacity
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_readcapacity10
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_read10
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_processwrite
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_processread
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_addressrangecheck
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_cmdprocess
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bot_decode_cbw
</UL>

<P><STRONG><a name="[157]"></a>scsi_startstopuint</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_dev_msc_scsi.o(i.scsi_startstopuint))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_cmdprocess
</UL>

<P><STRONG><a name="[154]"></a>scsi_testunitready</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usb_dev_msc_scsi.o(i.scsi_testunitready))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = scsi_testunitready &rArr; scsi_sensecode
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_sensecode
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_cmdprocess
</UL>

<P><STRONG><a name="[15e]"></a>scsi_verify10</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, usb_dev_msc_scsi.o(i.scsi_verify10))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = scsi_verify10 &rArr; scsi_addressrangecheck &rArr; scsi_sensecode
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_addressrangecheck
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_sensecode
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_cmdprocess
</UL>

<P><STRONG><a name="[15d]"></a>scsi_write10</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, usb_dev_msc_scsi.o(i.scsi_write10))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = scsi_write10 &rArr; scsi_processwrite &rArr; msc_bot_txcsw &rArr; hd_usb_readytorx &rArr; hd_usb_epntransbegin &rArr; hd_usb_wrpkt
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_processwrite
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_addressrangecheck
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_sensecode
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_readytorx
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_cmdprocess
</UL>

<P><STRONG><a name="[23]"></a>usb_dev_msc_datain</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, usb_dev_msc_class.o(i.usb_dev_msc_datain))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = usb_dev_msc_datain &rArr; msc_bot_datain &rArr; scsi_cmdprocess &rArr; scsi_write10 &rArr; scsi_processwrite &rArr; msc_bot_txcsw &rArr; hd_usb_readytorx &rArr; hd_usb_epntransbegin &rArr; hd_usb_wrpkt
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bot_datain
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_dev_msc_class.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>usb_dev_msc_dataout</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, usb_dev_msc_class.o(i.usb_dev_msc_dataout))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = usb_dev_msc_dataout &rArr; msc_bot_dataout &rArr; msc_bot_decode_cbw &rArr; scsi_cmdprocess &rArr; scsi_write10 &rArr; scsi_processwrite &rArr; msc_bot_txcsw &rArr; hd_usb_readytorx &rArr; hd_usb_epntransbegin &rArr; hd_usb_wrpkt
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bot_dataout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_dev_msc_class.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>usb_dev_msc_deinit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usb_dev_msc_class.o(i.usb_dev_msc_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usb_dev_msc_deinit &rArr; hd_usb_shutdevep &rArr; hd_usb_epdeactive
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bot_deinit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_shutdevep
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dev_msc_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_dev_msc_class.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>usb_dev_msc_getcfgdesc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_dev_msc_class.o(i.usb_dev_msc_getcfgdesc))
<BR>[Address Reference Count : 1]<UL><LI> usb_dev_msc_class.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>usb_dev_msc_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usb_dev_msc_class.o(i.usb_dev_msc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = usb_dev_msc_init &rArr; msc_bot_init &rArr; hd_usb_readytorx &rArr; hd_usb_epntransbegin &rArr; hd_usb_wrpkt
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dev_msc_deinit
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bot_init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_opendevep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_dev_msc_class.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>usb_dev_msc_setup</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, usb_dev_msc_class.o(i.usb_dev_msc_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = usb_dev_msc_setup &rArr; msc_bot_complete_clearfeature &rArr; msc_bot_txcsw &rArr; hd_usb_readytorx &rArr; hd_usb_epntransbegin &rArr; hd_usb_wrpkt
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bot_rst
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bot_complete_clearfeature
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_ctrlerr
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_shutdevep
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_flsdevep
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_ctrldatatx
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_opendevep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_dev_msc_class.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>usb_dev_user_conn</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_dev_user.o(i.usb_dev_user_conn))
<BR>[Address Reference Count : 1]<UL><LI> usb_dev_user.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>usb_dev_user_devcfg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_dev_user.o(i.usb_dev_user_devcfg))
<BR>[Address Reference Count : 1]<UL><LI> usb_dev_user.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>usb_dev_user_devresume</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_dev_user.o(i.usb_dev_user_devresume))
<BR>[Address Reference Count : 1]<UL><LI> usb_dev_user.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>usb_dev_user_devsusp</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_dev_user.o(i.usb_dev_user_devsusp))
<BR>[Address Reference Count : 1]<UL><LI> usb_dev_user.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>usb_dev_user_disconn</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_dev_user.o(i.usb_dev_user_disconn))
<BR>[Address Reference Count : 1]<UL><LI> usb_dev_user.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>usb_dev_user_init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, usb_dev_user.o(i.usb_dev_user_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usb_dev_user_init
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_dev_user.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>usb_dev_user_rst</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_dev_user.o(i.usb_dev_user_rst))
<BR>[Address Reference Count : 1]<UL><LI> usb_dev_user.o(.data)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[de]"></a>BSP_GPIO_Init</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, main.o(i.BSP_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BSP_GPIO_Init &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_DebugPortSetting
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ea]"></a>JumpToBootloader</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, main.o(i.JumpToBootloader))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = JumpToBootloader &rArr; enIrqResign
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enIrqResign
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fb]"></a>UsbClkIni</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, usb_bsp.o(i.UsbClkIni))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UsbClkIni &rArr; CLK_UpllCmd &rArr; CLK_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_UpllConfig
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_UpllCmd
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetUsbClkSource
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_bsp_init
</UL>

<P><STRONG><a name="[162]"></a>Key_Config</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_dev_user.o(i.Key_Config))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dev_user_init
</UL>

<P><STRONG><a name="[138]"></a>hd_usb_getoepintbit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_dev_int.o(i.hd_usb_getoepintbit))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_outep_isr
</UL>

<P><STRONG><a name="[146]"></a>usb_rdineptxfspcavail</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usb_dev_int.o(i.usb_rdineptxfspcavail))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_rdineptxfspcavail
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_usb_wrblanktxfifo
</UL>

<P><STRONG><a name="[f3]"></a>ReadFLASHFileBlock</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, virtualfat.o(i.ReadFLASHFileBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReadFLASHFileBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualFAT_ReadBlock
</UL>

<P><STRONG><a name="[f9]"></a>UpdateFAT12ClusterChain</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, virtualfat.o(i.UpdateFAT12ClusterChain))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UpdateFAT12ClusterChain &rArr; UpdateFAT12ClusterEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFAT12ClusterEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualFAT_ReadBlock
</UL>

<P><STRONG><a name="[fa]"></a>UpdateFAT12ClusterEntry</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, virtualfat.o(i.UpdateFAT12ClusterEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UpdateFAT12ClusterEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualFAT_ReadBlock
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFAT12ClusterChain
</UL>

<P><STRONG><a name="[100]"></a>WriteFLASHFileBlock</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, virtualfat.o(i.WriteFLASHFileBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WriteFLASHFileBlock &rArr; VirtualFlashProgram &rArr; EFM_SingleProgram &rArr; EFM_ErasePgmCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualFlashProgram
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualFlashErase
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualFAT_WriteBlock
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
